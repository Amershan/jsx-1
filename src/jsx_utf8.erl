%% The MIT License

%% Copyright (c) 2010 Alisdair Sullivan <alisdairsullivan@yahoo.ca>

%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:

%% The above copyright notice and this permission notice shall be included in
%% all copies or substantial portions of the Software.

%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%% THE SOFTWARE.

-module(jsx_utf8).
-author("alisdairsullivan@yahoo.ca").

-include("jsx_common.hrl").

-export([start/4]).

-define(encoding, utf8).


%% callbacks to our handler are roughly equivalent to a fold over the events, incremental
%%   rather than all at once.    

fold(end_of_stream, {F, State}) ->
    F(end_of_stream, State);
fold(Event, {F, State}) when is_function(F) ->
    {F, F(Event, State)}.


%% this code is mostly autogenerated and mostly ugly. apologies. for more insight on
%%   Callbacks or Opts, see the comments accompanying decoder/2 (in jsx.erl). Stack 
%%   is a stack of flags used to track depth and to keep track of whether we are 
%%   returning from a value or a key inside objects. all pops, peeks and pushes are 
%%   inlined. the code that handles naked values and comments is not optimized by the 
%%   compiler for efficient matching, but you shouldn't be using naked values or comments 
%%   anyways, they are horrible and contrary to the spec.

start(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) -> 
    start(Rest, Stack, Callbacks, Opts);
start(<<?start_object/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    object(Rest, [key|Stack], fold(start_object, Callbacks), Opts);
start(<<?start_array/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    array(Rest, [array|Stack], fold(start_array, Callbacks), Opts);
start(<<?quote/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    string(Rest, Stack, Callbacks, Opts, []);
start(<<$t/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    tr(Rest, Stack, Callbacks, Opts);
start(<<$f/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    fa(Rest, Stack, Callbacks, Opts);
start(<<$n/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    nu(Rest, Stack, Callbacks, Opts);
start(<<?negative/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    negative(Rest, Stack, Callbacks, Opts, "-");
start(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    zero(Rest, Stack, Callbacks, Opts, "0");
start(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_nonzero(S) ->
    integer(Rest, Stack, Callbacks, Opts, [S]);
start(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> start(Resume, Stack, Callbacks, Opts) end);
start(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> start(Stream, Stack, Callbacks, Opts) end};
start(_, _, _, _) -> {error, badjson}.


maybe_done(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) ->
    maybe_done(Rest, Stack, Callbacks, Opts);
maybe_done(<<?end_object/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold(end_object, Callbacks), Opts);
maybe_done(<<?end_array/?encoding, Rest/binary>>, [array|Stack], Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold(end_array, Callbacks), Opts);
maybe_done(<<?comma/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts) ->
    key(Rest, [key|Stack], Callbacks, Opts);
maybe_done(<<?comma/?encoding, Rest/binary>>, [array|_] = Stack, Callbacks, Opts) ->
    value(Rest, Stack, Callbacks, Opts);
maybe_done(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> maybe_done(Resume, Stack, Callbacks, Opts) end);
maybe_done(<<>>, [], Callbacks, Opts) ->
    {fold(end_of_stream, Callbacks), fun(Stream) -> maybe_done(Stream, [], Callbacks, Opts) end};
maybe_done(Bin, [], Callbacks, ?stream_mode(Opts)) ->
    {fold(end_of_stream, Callbacks), fun(Stream) -> 
        start(<<Bin/binary, Stream/binary>>, [], fold(reset, Callbacks), Opts) 
    end};
maybe_done(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> maybe_done(Stream, Stack, Callbacks, Opts) end};
maybe_done(_, _, _, _) -> {error, badjson}.


object(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) ->
    object(Rest, Stack, Callbacks, Opts);
object(<<?quote/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    string(Rest, Stack, Callbacks, Opts, []);
object(<<?end_object/?encoding, Rest/binary>>, [key|Stack], Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold(end_object, Callbacks), Opts);
object(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> object(Resume, Stack, Callbacks, Opts) end);
object(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> object(Stream, Stack, Callbacks, Opts) end};
object(_, _, _, _) -> {error, badjson}.


array(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) -> 
    array(Rest, Stack, Callbacks, Opts);       
array(<<?quote/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    string(Rest, Stack, Callbacks, Opts, []);
array(<<$t/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    tr(Rest, Stack, Callbacks, Opts);
array(<<$f/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    fa(Rest, Stack, Callbacks, Opts);
array(<<$n/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    nu(Rest, Stack, Callbacks, Opts);
array(<<?negative/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    negative(Rest, Stack, Callbacks, Opts, "-");
array(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    zero(Rest, Stack, Callbacks, Opts, "0");
array(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_nonzero(S) ->
    integer(Rest, Stack, Callbacks, Opts, [S]);
array(<<?start_object/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    object(Rest, [key|Stack], fold(start_object, Callbacks), Opts);
array(<<?start_array/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    array(Rest, [array|Stack], fold(start_array, Callbacks), Opts);
array(<<?end_array/?encoding, Rest/binary>>, [array|Stack], Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold(end_array, Callbacks), Opts);
array(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> array(Resume, Stack, Callbacks, Opts) end);
array(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> array(Stream, Stack, Callbacks, Opts) end};
array(_, _, _, _) -> {error, badjson}.


value(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) -> 
    value(Rest, Stack, Callbacks, Opts);
value(<<?quote/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    string(Rest, Stack, Callbacks, Opts, []);
value(<<$t/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    tr(Rest, Stack, Callbacks, Opts);
value(<<$f/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    fa(Rest, Stack, Callbacks, Opts);
value(<<$n/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    nu(Rest, Stack, Callbacks, Opts);
value(<<?negative/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    negative(Rest, Stack, Callbacks, Opts, "-");
value(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    zero(Rest, Stack, Callbacks, Opts, "0");
value(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_nonzero(S) ->
    integer(Rest, Stack, Callbacks, Opts, [S]);
value(<<?start_object/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    object(Rest, [key|Stack], fold(start_object, Callbacks), Opts);
value(<<?start_array/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    array(Rest, [array|Stack], fold(start_array, Callbacks), Opts);
value(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> value(Resume, Stack, Callbacks, Opts) end);
value(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> value(Stream, Stack, Callbacks, Opts) end};
value(_, _, _, _) -> {error, badjson}.


colon(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) ->
    colon(Rest, Stack, Callbacks, Opts);
colon(<<?colon/?encoding, Rest/binary>>, [key|Stack], Callbacks, Opts) ->
    value(Rest, [object|Stack], Callbacks, Opts);
colon(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> colon(Resume, Stack, Callbacks, Opts) end);
colon(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> colon(Stream, Stack, Callbacks, Opts) end};
colon(_, _, _, _) -> {error, badjson}.


key(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts) when ?is_whitespace(S) ->
    key(Rest, Stack, Callbacks, Opts);        
key(<<?quote/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    string(Rest, Stack, Callbacks, Opts, []);
key(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts)) ->
    maybe_comment(Rest, fun(Resume) -> key(Resume, Stack, Callbacks, Opts) end);
key(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> key(Stream, Stack, Callbacks, Opts) end};
key(_, _, _, _) -> {error, badjson}.


%% string has an additional parameter, an accumulator (Acc) used to hold the intermediate
%%   representation of the string being parsed. using a list of integers representing
%%   unicode codepoints is faster than constructing binaries, many of which will be
%%   converted back to lists by the user anyways.

%% the clause starting with Bin is necessary for cases where a stream is broken at a
%%   point where it contains only a partial utf-8 sequence. we emulate a function_clause
%%   error if the partial sequence is not valid utf-8 to maintain consistency of errors

string(<<?quote/?encoding, Rest/binary>>, [key|_] = Stack, Callbacks, Opts, Acc) ->
    colon(Rest, Stack, fold({key, lists:reverse(Acc)}, Callbacks), Opts);
string(<<?quote/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold({string, lists:reverse(Acc)}, Callbacks), Opts);
string(<<?rsolidus/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    escape(Rest, Stack, Callbacks, Opts, Acc);   
string(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_noncontrol(S) ->
    string(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
string(Bin, Stack, Callbacks, Opts, Acc) ->
    case partial_utf8(Bin) of
        true ->
            {incomplete, fun(Stream) -> string(<<Bin/binary, Stream/binary>>, Stack, Callbacks, Opts, Acc) end}
        ; false ->
            {error, badjson}
    end.
    
%% in the case of broken (as in split over two halves of a stream) utf-8 input,
%%   ensure that the half present is *possibly* valid
    
partial_utf8(<<>>) -> true;
partial_utf8(<<X>>) when X >= 16#c2, X =< 16#df -> true;
partial_utf8(<<X, Rest/binary>>) when X >= 16#e0, X =< 16#ef ->
    case Rest of
        <<>> -> true
        ; <<Y>> when Y >= 16#80, Y =< 16#bf -> true
    end;
partial_utf8(<<X, Rest/binary>>) when X >= 16#f0, X =< 16#f4 ->
    case Rest of
        <<>> -> true
        ; <<Y>> when Y >= 16#80, Y =< 16#bf -> true
        ; <<Y, Z>> when Y >= 16#80, Y =< 16#bf, Z >= 16#80, Z =< 16#bf -> true
    end;
partial_utf8(_) -> false.


%% only thing to note here is the additional accumulator passed to escaped_unicode used
%%   to hold the codepoint sequence. unescessary, but nicer than using the string 
%%   accumulator. 

escape(<<$b/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    string(Rest, Stack, Callbacks, Opts, "\b" ++ Acc);
escape(<<$f/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    string(Rest, Stack, Callbacks, Opts, "\f" ++ Acc);
escape(<<$n/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    string(Rest, Stack, Callbacks, Opts, "\n" ++ Acc);
escape(<<$r/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    string(Rest, Stack, Callbacks, Opts, "\r" ++ Acc);
escape(<<$t/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    string(Rest, Stack, Callbacks, Opts, "\t" ++ Acc);
escape(<<$u/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    escaped_unicode(Rest, Stack, Callbacks, Opts, Acc, []);      
escape(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) 
        when S =:= ?quote; S =:= ?solidus; S =:= ?rsolidus ->
    string(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
escape(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> escape(Stream, Stack, Callbacks, Opts, Acc) end};
escape(_, _, _, _, _) -> {error, badjson}.


%% this code is ugly and unfortunate, but so is json's handling of escaped unicode
%%   codepoint sequences. if the ascii option is present, the sequence is converted
%%   to a codepoint and inserted into the string if it represents an ascii value. if 
%%   the codepoint option is present the sequence is converted and inserted as long
%%   as it represents a valid unicode codepoint. this means non-characters 
%%   representable in 16 bits are not converted (the utf16 surrogates and the two
%%   special non-characters). any other option and no conversion is done.

escaped_unicode(<<D/?encoding, Rest/binary>>, 
        Stack, 
        Callbacks, 
        ?escaped_unicode_to_ascii(Opts), 
        String, 
        [C, B, A]) 
            when ?is_hex(D) ->
    case erlang:list_to_integer([A, B, C, D], 16) of
        X when X < 128 ->
            string(Rest, Stack, Callbacks, Opts, [X] ++ String)
        ; _ ->
            string(Rest, Stack, Callbacks, Opts, [D, C, B, A, $u, ?rsolidus] ++ String)
    end;
escaped_unicode(<<D/?encoding, Rest/binary>>, 
        Stack, 
        Callbacks, 
        ?escaped_unicode_to_codepoint(Opts), 
        String, 
        [C, B, A]) 
            when ?is_hex(D) ->
    case erlang:list_to_integer([A, B, C, D], 16) of
        X when X >= 16#dc00, X =< 16#dfff ->
            case check_acc_for_surrogate(String) of
                false ->
                    string(Rest, Stack, Callbacks, Opts, [D, C, B, A, $u, ?rsolidus] ++ String)
                ; {Y, NewString} ->
                    string(Rest, Stack, Callbacks, Opts, [surrogate_to_codepoint(Y, X)] ++ NewString)
            end
        ; X when X < 16#d800; X > 16#dfff, X < 16#fffe ->
            string(Rest, Stack, Callbacks, Opts, [X] ++ String) 
        ; _ ->
            string(Rest, Stack, Callbacks, Opts, [D, C, B, A, $u, ?rsolidus] ++ String)
    end;
escaped_unicode(<<D/?encoding, Rest/binary>>, Stack, Callbacks, Opts, String, [C, B, A]) when ?is_hex(D) ->
    string(Rest, Stack, Callbacks, Opts, [D, C, B, A, $u, ?rsolidus] ++ String);
escaped_unicode(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, String, Acc) when ?is_hex(S) ->
    escaped_unicode(Rest, Stack, Callbacks, Opts, String, [S] ++ Acc);
escaped_unicode(<<>>, Stack, Callbacks, Opts, String, Acc) ->
    {incomplete, fun(Stream) -> escaped_unicode(Stream, Stack, Callbacks, Opts, String, Acc) end};
escaped_unicode(_, _, _, _, _, _) -> {error, badjson}.

%% upon encountering a low pair json/hex encoded value, check to see if there's a high
%%   value already in the accumulator. 

check_acc_for_surrogate([D, C, B, A, $u, ?rsolidus|Rest])
        when ?is_hex(D), ?is_hex(C), ?is_hex(B), ?is_hex(A) ->
    case erlang:list_to_integer([A, B, C, D], 16) of
        X when X >=16#d800, X =< 16#dbff ->
            {X, Rest};
        _ ->
            false
    end;
check_acc_for_surrogate(_) ->
    false.
    
%% stole this from the unicode spec    

surrogate_to_codepoint(High, Low) ->
    (High - 16#d800) * 16#400 + (Low - 16#dc00) + 16#10000.


%% like strings, numbers are collected in an intermediate accumulator before
%%   being emitted to the callback handler. no processing of numbers is done in
%%   process, it's left for the user, though there are convenience functions to
%%   convert them into erlang floats/integers in jsx_utils.erl.

%% TODO: actually write that jsx_utils.erl module mentioned above...

negative(<<$0/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    zero(Rest, Stack, Callbacks, Opts, "0" ++ Acc);
negative(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_nonzero(S) ->
    integer(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
negative(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> negative(Stream, Stack, Callbacks, Opts, Acc) end};
negative(_, _, _, _, _) -> {error, badjson}.


zero(<<?end_object/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_object, fold({integer, lists:reverse(Acc)}, Callbacks)), Opts);
zero(<<?end_array/?encoding, Rest/binary>>, [array|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_array, fold({integer, lists:reverse(Acc)}, Callbacks)), Opts);
zero(<<?comma/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    key(Rest, [key|Stack], fold({integer, lists:reverse(Acc)}, Callbacks), Opts);
zero(<<?comma/?encoding, Rest/binary>>, [array|_] = Stack, Callbacks, Opts, Acc) ->
    value(Rest, Stack, fold({integer, lists:reverse(Acc)}, Callbacks), Opts);
zero(<<?decimalpoint/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    initial_decimal(Rest, Stack, Callbacks, Opts, [?decimalpoint] ++ Acc);
zero(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_whitespace(S) ->
    maybe_done(Rest, Stack, fold({integer, lists:reverse(Acc)}, Callbacks), Opts);
zero(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts), Acc) ->
    maybe_comment(Rest, fun(Resume) -> zero(Resume, Stack, Callbacks, Opts, Acc) end);
zero(Bin, [], Callbacks, ?stream_mode(Opts), Acc) ->
    CB = fold({integer, lists:reverse(Acc)}, Callbacks),
    {fold(end_of_stream, CB), fun(Stream) ->
        start(<<Bin/binary, Stream/binary>>, [], fold(reset, CB), Opts)
    end};
zero(<<>>, [], Callbacks, Opts, Acc) ->
    {fold(end_of_stream, fold({integer, lists:reverse(Acc)}, Callbacks)), 
        fun(Stream) -> zero(Stream, [], Callbacks, Opts, Acc) end};
zero(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> zero(Stream, Stack, Callbacks, Opts, Acc) end};
zero(_, _, _, _, _) -> {error, badjson}.


integer(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_nonzero(S) ->
    integer(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
integer(<<?end_object/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_object, fold({integer, lists:reverse(Acc)}, Callbacks)), Opts);
integer(<<?end_array/?encoding, Rest/binary>>, [array|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_array, fold({integer, lists:reverse(Acc)}, Callbacks)), Opts);
integer(<<?comma/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    key(Rest, [key|Stack], fold({integer, lists:reverse(Acc)}, Callbacks), Opts);
integer(<<?comma/?encoding, Rest/binary>>, [array|_] = Stack, Callbacks, Opts, Acc) ->
    value(Rest, Stack, fold({integer, lists:reverse(Acc)}, Callbacks), Opts);
integer(<<?decimalpoint/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    initial_decimal(Rest, Stack, Callbacks, Opts, [?decimalpoint] ++ Acc);
integer(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    integer(Rest, Stack, Callbacks, Opts, [?zero] ++ Acc);
integer(<<$e/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    e(Rest, Stack, Callbacks, Opts, "e0." ++ Acc);
integer(<<$E/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    e(Rest, Stack, Callbacks, Opts, "e0." ++ Acc);
integer(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_whitespace(S) ->
    maybe_done(Rest, Stack, fold({integer, lists:reverse(Acc)}, Callbacks), Opts);
integer(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts), Acc) ->
    maybe_comment(Rest, fun(Resume) -> integer(Resume, Stack, Callbacks, Opts, Acc) end);
integer(Bin, [], Callbacks, ?stream_mode(Opts), Acc) ->
    CB = fold({integer, lists:reverse(Acc)}, Callbacks),
    {fold(end_of_stream, CB), fun(Stream) ->
        start(<<Bin/binary, Stream/binary>>, [], fold(reset, CB), Opts)
    end};
integer(<<>>, [], Callbacks, Opts, Acc) ->
    {fold(end_of_stream, fold({integer, lists:reverse(Acc)}, Callbacks)), 
        fun(Stream) -> integer(Stream, [], Callbacks, Opts, Acc) end};
integer(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> integer(Stream, Stack, Callbacks, Opts, Acc) end};
integer(_, _, _, _, _) -> {error, badjson}.

initial_decimal(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_nonzero(S) ->
    decimal(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
initial_decimal(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    decimal(Rest, Stack, Callbacks, Opts, [?zero] ++ Acc);
initial_decimal(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> initial_decimal(Stream, Stack, Callbacks, Opts, Acc) end};
initial_decimal(_, _, _, _, _) -> {error, badjson}.

decimal(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_nonzero(S) ->
    decimal(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
decimal(<<?end_object/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_object, fold({float, lists:reverse(Acc)}, Callbacks)), Opts);
decimal(<<?end_array/?encoding, Rest/binary>>, [array|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_array, fold({float, lists:reverse(Acc)}, Callbacks)), Opts);
decimal(<<?comma/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    key(Rest, [key|Stack], fold({float, lists:reverse(Acc)}, Callbacks), Opts);
decimal(<<?comma/?encoding, Rest/binary>>, [array|_] = Stack, Callbacks, Opts, Acc) ->
    value(Rest, Stack, fold({float, lists:reverse(Acc)}, Callbacks), Opts);
decimal(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    decimal(Rest, Stack, Callbacks, Opts, [?zero] ++ Acc);
decimal(<<$e/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    e(Rest, Stack, Callbacks, Opts, "e" ++ Acc);
decimal(<<$E/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    e(Rest, Stack, Callbacks, Opts, "e" ++ Acc);
decimal(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_whitespace(S) ->
    maybe_done(Rest, Stack, fold({float, lists:reverse(Acc)}, Callbacks), Opts);
decimal(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts), Acc) ->
    maybe_comment(Rest, fun(Resume) -> decimal(Resume, Stack, Callbacks, Opts, Acc) end);
decimal(Bin, [], Callbacks, ?stream_mode(Opts), Acc) ->
    CB = fold({float, lists:reverse(Acc)}, Callbacks),
    {fold(end_of_stream, CB), fun(Stream) ->
        start(<<Bin/binary, Stream/binary>>, [], fold(reset, CB), Opts)
    end};
decimal(<<>>, [], Callbacks, Opts, Acc) ->
    {fold(end_of_stream, fold({float, lists:reverse(Acc)}, Callbacks)), 
        fun(Stream) -> decimal(Stream, [], Callbacks, Opts, Acc) end};
decimal(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> decimal(Stream, Stack, Callbacks, Opts, Acc) end};
decimal(_, _, _, _, _) -> {error, badjson}.


e(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when S =:= ?zero; ?is_nonzero(S) ->
    exp(Rest, Stack, Callbacks, Opts, [S] ++ Acc);   
e(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when S =:= ?positive; S =:= ?negative ->
    ex(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
e(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> e(Stream, Stack, Callbacks, Opts, Acc) end};
e(_, _, _, _, _) -> {error, badjson}.


ex(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when S =:= ?zero; ?is_nonzero(S) ->
    exp(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
ex(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> ex(Stream, Stack, Callbacks, Opts, Acc) end};
ex(_, _, _, _, _) -> {error, badjson}.


exp(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_nonzero(S) ->
    exp(Rest, Stack, Callbacks, Opts, [S] ++ Acc);
exp(<<?end_object/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_object, fold({float, lists:reverse(Acc)}, Callbacks)), Opts);
exp(<<?end_array/?encoding, Rest/binary>>, [array|Stack], Callbacks, Opts, Acc) ->
    maybe_done(Rest, Stack, fold(end_array, fold({float, lists:reverse(Acc)}, Callbacks)), Opts);
exp(<<?comma/?encoding, Rest/binary>>, [object|Stack], Callbacks, Opts, Acc) ->
    key(Rest, [key|Stack], fold({float, lists:reverse(Acc)}, Callbacks), Opts);
exp(<<?comma/?encoding, Rest/binary>>, [array|_] = Stack, Callbacks, Opts, Acc) ->
    value(Rest, Stack, fold({float, lists:reverse(Acc)}, Callbacks), Opts);
exp(<<?zero/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) ->
    exp(Rest, Stack, Callbacks, Opts, [?zero] ++ Acc);
exp(<<?solidus/?encoding, Rest/binary>>, Stack, Callbacks, ?comments_enabled(Opts), Acc) ->
    maybe_comment(Rest, fun(Resume) -> exp(Resume, Stack, Callbacks, Opts, Acc) end);
exp(<<S/?encoding, Rest/binary>>, Stack, Callbacks, Opts, Acc) when ?is_whitespace(S) ->
    maybe_done(Rest, Stack, fold({float, lists:reverse(Acc)}, Callbacks), Opts);
exp(Bin, [], Callbacks, ?stream_mode(Opts), Acc) ->
    CB = fold({float, lists:reverse(Acc)}, Callbacks),
    {fold(end_of_stream, CB), fun(Stream) ->
        start(<<Bin/binary, Stream/binary>>, [], fold(reset, CB), Opts)
    end};
exp(<<>>, [], Callbacks, Opts, Acc) ->
    {fold(end_of_stream, fold({float, lists:reverse(Acc)}, Callbacks)), 
        fun(Stream) -> exp(Stream, [], Callbacks, Opts, Acc) end};
exp(<<>>, Stack, Callbacks, Opts, Acc) ->
    {incomplete, fun(Stream) -> exp(Stream, Stack, Callbacks, Opts, Acc) end};
exp(_, _, _, _, _) -> {error, badjson}.


tr(<<$r/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    tru(Rest, Stack, Callbacks, Opts);
tr(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> tr(Stream, Stack, Callbacks, Opts) end};
tr(_, _, _, _) -> {error, badjson}.


tru(<<$u/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    true(Rest, Stack, Callbacks, Opts);
tru(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> tru(Stream, Stack, Callbacks, Opts) end};
tru(_, _, _, _) -> {error, badjson}.


true(<<$e/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold({literal, true}, Callbacks), Opts);
true(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> true(Stream, Stack, Callbacks, Opts) end};
true(_, _, _, _) -> {error, badjson}.


fa(<<$a/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    fal(Rest, Stack, Callbacks, Opts);
fa(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> fa(Stream, Stack, Callbacks, Opts) end};
fa(_, _, _, _) -> {error, badjson}.


fal(<<$l/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    fals(Rest, Stack, Callbacks, Opts);
fal(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> fal(Stream, Stack, Callbacks, Opts) end};
fal(_, _, _, _) -> {error, badjson}.


fals(<<$s/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    false(Rest, Stack, Callbacks, Opts);
fals(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> fals(Stream, Stack, Callbacks, Opts) end};
fals(_, _, _, _) -> {error, badjson}.


false(<<$e/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold({literal, false}, Callbacks), Opts);
false(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> false(Stream, Stack, Callbacks, Opts) end};
false(_, _, _, _) -> {error, badjson}.


nu(<<$u/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    nul(Rest, Stack, Callbacks, Opts);
nu(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> nu(Stream, Stack, Callbacks, Opts) end};
nu(_, _, _, _) -> {error, badjson}.


nul(<<$l/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    null(Rest, Stack, Callbacks, Opts);
nul(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> nul(Stream, Stack, Callbacks, Opts) end};
nul(_, _, _, _) -> {error, badjson}.


null(<<$l/?encoding, Rest/binary>>, Stack, Callbacks, Opts) ->
    maybe_done(Rest, Stack, fold({literal, null}, Callbacks), Opts);
null(<<>>, Stack, Callbacks, Opts) ->
    {incomplete, fun(Stream) -> null(Stream, Stack, Callbacks, Opts) end};
null(_, _, _, _) -> {error, badjson}.  


%% comments are c style, /* blah blah */ and are STRONGLY discouraged. any unicode
%%   character is valid in a comment, except, obviously the */ sequence which ends
%%   the comment. they're implemented as a closure called when the comment ends that
%%   returns execution to the point where the comment began. comments are not 
%%   recorded in any way, simply parsed.    

maybe_comment(<<?star/?encoding, Rest/binary>>, Resume) ->
    comment(Rest, Resume);
maybe_comment(<<>>, Resume) ->
    {incomplete, fun(Stream) -> maybe_comment(Stream, Resume) end};
maybe_comment(_, _) -> {error, badjson}.


comment(<<?star/?encoding, Rest/binary>>, Resume) ->
    maybe_comment_done(Rest, Resume);
comment(<<_/?encoding, Rest/binary>>, Resume) ->
    comment(Rest, Resume);
comment(<<>>, Resume) ->
    {incomplete, fun(Stream) -> comment(Stream, Resume) end}.


maybe_comment_done(<<?solidus/?encoding, Rest/binary>>, Resume) ->
    Resume(Rest);
maybe_comment_done(<<_/?encoding, Rest/binary>>, Resume) ->
    comment(Rest, Resume);
maybe_comment_done(<<>>, Resume) ->
    {incomplete, fun(Stream) -> maybe_comment_done(Stream, Resume) end}.